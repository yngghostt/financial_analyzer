import telebot

import plot
import qr
import tableform
from keyboards import *

# –¢–µ–ª–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞

API = 'YOUR_IP_HERE'
bot = telebot.TeleBot(API)

temp_dict = {}


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

@bot.message_handler(commands=['start'])
def command_start(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    module.add_user(message.chat.username, message.chat.id)
    start_keyboard = get_start_keyboard()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.username}! '
                                      f'–Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n'
                                      f'–Ø —É–º–µ—é:\n'
                                      f'* –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n'
                                      f'* –°—á–∏—Ç—ã–≤–∞—Ç—å QR –∫–æ–¥—ã —á–µ–∫–æ–≤\n'
                                      f'* –í—ã–≤–æ–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É \n'
                                      f'* –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ —Ç–∞–±–ª–∏—Ü—ã \n'
                                      f'–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é\n'
                                      f'/help - –ø–æ–º–æ—â—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', reply_markup=start_keyboard)


@bot.message_handler(commands=['menu'])
def command_menu(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /menu
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    menu_keyboard = get_menu_keyboard()
    bot.send_message(message.chat.id, 'üìã –ú–µ–Ω—é –±–æ—Ç–∞\n'
                                      '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
                                      '* –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n'
                                      '* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ú–µ–Ω—é" —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é '
                                      '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n',
                     reply_markup=menu_keyboard)


@bot.message_handler(commands=['add'])
def command_add(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /add
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    plus_minus_keyboard = get_plus_minus_keyboard()
    bot.send_message(chat_id=message.chat.id,
                     text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=plus_minus_keyboard)


@bot.message_handler(commands=['statistics'])
def command_statistics(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /statistics
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    statistics_keyboard = get_statistics_keyboard()
    bot.send_message(chat_id=message.chat.id,
                     text='üìà –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n',
                     reply_markup=statistics_keyboard)


@bot.message_handler(commands=['help'])
def command_help(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /help
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    bot.send_message(message.chat.id, '–ü–æ–º–æ—â—å\n'
                                      '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n'
                                      '* –î–æ–±–∞–≤–∏—Ç—å: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ '
                                      '–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n '
                                      '* –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: '
                                      '   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∑–∞ '
                                      '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n '
                                      '   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–≥—Ä–∞—Ñ–∏–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é —Ä–∞—Å—Ö–æ–¥—ã –ø–æ '
                                      '–∫–∞—Ç–µ–≥–æ—Ä—è–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n'
                                      '–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n'
                                      '/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é\n'
                                      '/menu - –≤—ã–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –±–æ—Ç–∞ \n'
                                      '/add - –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥–∞\n'
                                      '/statistics - –≤—ã–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ \n')


# –§—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥–∞


def process_name_step(message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if message.content_type == 'text':
        temp_dict[message.chat.id].name = message.text
        position_type = temp_dict[message.chat.id].type
        categories_keyboard = get_categories_keyboard(position_type)
        bot.send_message(message.chat.id, 'üóÇ –í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=categories_keyboard)
    elif message.content_type == 'document' or message.content_type == 'photo':
        if message.content_type == 'photo':
            photo_id = message.photo[0].file_id
        if message.content_type == 'document':
            if not message.document.mime_type.split('/')[0] == 'image':
                reply = bot.send_message(message.chat.id, '‚Äº –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–∏ QR –∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ '
                                                          'QR –∫–æ–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥')
                bot.register_next_step_handler(reply, process_name_step)
                return
            photo_id = message.document.file_id

        bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...')
        file_info = bot.get_file(photo_id)
        downloaded_file = bot.download_file(file_info.file_path)
        path = 'userfiles/qr/' + str(message.chat.id) + '.jpg'
        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)
        info = qr.read_qr(path)

        if info is None:
            reply = bot.send_message(message.chat.id, '‚Äº –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–∏ QR –∫–æ–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ '
                                                      '–∫–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥')
            bot.register_next_step_handler(reply, process_name_step)
            return
        temp_dict[message.chat.id].type = 'expense'
        temp_dict[message.chat.id].day = info[0]
        temp_dict[message.chat.id].month = info[1]
        temp_dict[message.chat.id].year = info[2]
        temp_dict[message.chat.id].price = info[3]

        reply = bot.send_message(message.chat.id, '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:')
        bot.register_next_step_handler(reply, process_name_step)
    else:
        reply = bot.send_message(message.chat.id,
                                 '‚Äº –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–∏ QR –∫–æ–¥–∞. '
                                 '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é QR –∫–æ–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º')
        bot.register_next_step_handler(reply, process_name_step)


def process_price_step(message):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        temp_dict[message.chat.id].price = float(message.text.replace(',', '.'))
        if float(message.text) <= 0:
            reply = bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            bot.register_next_step_handler(reply, process_price_step)
            return

    except ValueError:
        reply = bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        bot.register_next_step_handler(reply, process_price_step)
        return
    date_keyboard = get_date_keyboard()
    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É", reply_markup=date_keyboard)


def process_confirm_step(message):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    confirm_keyboard = get_confirm_keyboard()
    position = temp_dict[message.chat.id]
    if position.type == 'income':
        bot.send_message(
            message.chat.id,
            f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–µ:\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
            f'–°—É–º–º–∞:  {round(position.price, 2)} —Ä—É–±\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
            f'{module.get_category_name(position.category_id, position.type)}\n '
            f'–î–∞—Ç–∞: {position.day}/'
            f'{position.month}/'
            f'{position.year}\n'
            f'–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?', reply_markup=confirm_keyboard)

    if position.type == 'expense':
        bot.send_message(
            message.chat.id,
            f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ:\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
            f'–¶–µ–Ω–∞: {round(position.price, 2)} —Ä—É–±\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
            f'{module.get_category_name(position.category_id, position.type)}\n '
            f'–î–∞—Ç–∞: {position.day}/'
            f'{position.month}/'
            f'{position.year}\n'
            f'–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?', reply_markup=confirm_keyboard)


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä


@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def call_menu(call):
    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    menu_keyboard = get_menu_keyboard()
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üìã –ú–µ–Ω—é –±–æ—Ç–∞\n'
                               '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
                               '* –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n'
                               '* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ú–µ–Ω—é" —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é '
                               '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n', reply_markup=menu_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'to_menu')
def call_to_menu(call):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    del temp_dict[call.message.chat.id]
    command_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'add')
def call_add(call):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    plus_minus_keyboard = get_plus_minus_keyboard()
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=plus_minus_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'income')
def call_income(call):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    position = module.Account(type='income', user_id=module.get_user_id(call.message.chat.id))
    temp_dict[call.message.chat.id] = position
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞")
    bot.register_next_step_handler(call.message, process_name_step)


@bot.callback_query_handler(func=lambda call: call.data == 'expense')
def call_expense(call):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    position = module.Account(type='expense', user_id=module.get_user_id(call.message.chat.id))
    temp_dict[call.message.chat.id] = position
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é QR –∫–æ–¥–∞ –Ω–∞ —á–µ–∫–µ")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, process_name_step)


@bot.callback_query_handler(func=lambda call: str(call.data).isdigit())
def callback_category(call):
    """
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    id = -1
    position_type = temp_dict[call.message.chat.id].type

    categories = module.get_categories(position_type)
    for i in range(len(categories)):
        if str(call.data) == str(i):
            id = i + 1
            break
    temp_dict[call.message.chat.id].category_id = id
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    if temp_dict[call.message.chat.id].price is not None:
        process_confirm_step(call.message)
    else:
        bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        bot.register_next_step_handler(call.message, process_price_step)


@bot.callback_query_handler(func=lambda call: call.data == 'today')
def callback_today(call):
    """
    –í—ã–±–æ—Ä "—Å–µ–≥–æ–¥–Ω—è" –≤ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = datetime.datetime.today().strftime("%d/%m/%Y").split("/")
    temp_dict[call.message.chat.id].day = int(date[0])
    temp_dict[call.message.chat.id].month = int(date[1])
    temp_dict[call.message.chat.id].year = int(date[2])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    process_confirm_step(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'yesterday')
def callback_yesterday(call):
    """
    –í—ã–±–æ—Ä "–≤—á–µ—Ä–∞" –≤ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = (datetime.datetime.today() - datetime.timedelta(days=1)).strftime("%d/%m/%Y").split("/")
    temp_dict[call.message.chat.id].day = int(date[0])
    temp_dict[call.message.chat.id].month = int(date[1])
    temp_dict[call.message.chat.id].year = int(date[2])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    process_confirm_step(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'other')
def callback_other(call):
    """
    –í—ã–±–æ—Ä –∏–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—ã–∑–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    calendar_keyboard = get_calendar_keyboard()
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=calendar_keyboard)


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'ignore')
def callback_calendar_ignore(call):
    """
    –ü—É—Å—Ç—ã–µ –∫–ª–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'day')
def callback_calendar_day(call):
    """
    –í—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = str(call.data).split(';')
    temp_dict[call.message.chat.id].day = int(date[1])
    temp_dict[call.message.chat.id].month = int(date[2])
    temp_dict[call.message.chat.id].year = int(date[3])
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    process_confirm_step(call.message)


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'prev_month')
def callback_calendar_prev_month(call):
    """
    –í—ã–∑–æ–≤ –ø—Ä–µ—Ä—ã–¥—É—à–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = str(call.data).split(';')
    current = datetime.datetime(int(date[3]), int(date[2]), 1)
    prev = current - datetime.timedelta(days=1)
    bot.edit_message_text(text=call.message.text,
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=get_calendar_keyboard(int(prev.year), int(prev.month)))


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'next_month')
def callback_calendar_next_month(call):
    """
    –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—à–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = str(call.data).split(';')
    current = datetime.datetime(int(date[3]), int(date[2]), 1)
    nex = current + datetime.timedelta(days=31)
    bot.edit_message_text(text=call.message.text,
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=get_calendar_keyboard(int(nex.year), int(nex.month)))


@bot.callback_query_handler(func=lambda call: call.data == 'confirm')
def callback_confirm(call):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    position = temp_dict[call.message.chat.id]
    module.add_position(position)
    if position.type == 'income':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–µ:\n'
                                   f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
                                   f'–°—É–º–º–∞:  {round(position.price, 2)} —Ä—É–±\n'
                                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
                                   f'{module.get_category_name(position.category_id, position.type)}\n '
                                   f'–î–∞—Ç–∞: {position.day}/'
                                   f'{position.month}/'
                                   f'{position.year}\n'
                                   f'---\n'
                                   f'‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    if position.type == 'expense':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ:\n'
                                   f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
                                   f'–¶–µ–Ω–∞: {round(position.price, 2)} —Ä—É–±\n'
                                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
                                   f'{module.get_category_name(position.category_id, position.type)}\n '
                                   f'–î–∞—Ç–∞: {position.day}/'
                                   f'{position.month}/'
                                   f'{position.year}\n'
                                   f'---\n'
                                   f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')

    del temp_dict[call.message.chat.id]
    command_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def callback_cancel(call):
    """
    –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    position = temp_dict[call.message.chat.id]
    if position.type == 'income':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–µ:\n'
                                   f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
                                   f'–°—É–º–º–∞:  {round(position.price, 2)} —Ä—É–±\n'
                                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
                                   f'{module.get_category_name(position.category_id, position.type)}\n '
                                   f'–î–∞—Ç–∞: {position.day}/'
                                   f'{position.month}/'
                                   f'{position.year}\n'
                                   f'---\n'
                                   f'üö´ –û—Ç–º–µ–Ω–∞')
    if position.type == 'expense':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ:\n'
                                   f'–ù–∞–∑–≤–∞–Ω–∏–µ: {position.name}\n'
                                   f'–¶–µ–Ω–∞: {round(position.price, 2)} —Ä—É–±\n'
                                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '
                                   f'{module.get_category_name(position.category_id, position.type)}\n '
                                   f'–î–∞—Ç–∞: {position.day}/'
                                   f'{position.month}/'
                                   f'{position.year}\n'
                                   f'---\n'
                                   f'üö´ –û—Ç–º–µ–Ω–∞')
    del temp_dict[call.message.chat.id]
    command_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'statistics')
def callback_statistic(call):
    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    statistics_keyboard = get_statistics_keyboard()
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üìà –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n',
                          reply_markup=statistics_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'income_statistics' or call.data == 'expense_statistics')
def callback_positions_type_statistics(call):
    """
    –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    positions_type = call.data.split('_')[0]
    temp_dict[call.message.chat.id] = module.StatisticsRequest(positions_type=positions_type)
    statistics_types_keyboard = get_statistics_keyboard_types()
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=statistics_types_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'default_statistics' or call.data == 'categories_statistics')
def callback_request_type_statistics(call):
    """
    –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    temp_dict[call.message.chat.id].request_type = call.data
    positions_type = temp_dict[call.message.chat.id].positions_type
    statistics_period_keyboard = get_statistics_period_keyboard(positions_type + '_statistics')
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=statistics_period_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'month')
def callback_month(call):
    """
    –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    now = datetime.datetime.now()
    bot.answer_callback_query(callback_query_id=call.id)
    statistics_type = temp_dict[call.message.chat.id].request_type
    month_keyboard = get_month_slider(statistics_type, now.year, now.month)
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=month_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'all_time')
def callback_all_time(call):
    """
    –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    statistics_request = temp_dict[call.message.chat.id]
    all_price, all_count = module.get_positions(call.message.chat.id, statistics_request.positions_type)
    word = ''
    if statistics_request.positions_type == 'income':
        word = '–¥–æ—Ö–æ–¥'
    if statistics_request.positions_type == 'expense':
        word = '—Ä–∞—Å—Ö–æ–¥'

    if statistics_request.request_type == 'default_statistics':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {word}–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n'
                                   f'---\n'
                                   f'–í—Å–µ–≥–æ {word}–æ–≤: {all_count}\n'
                                   f'–°—É–º–º–∞ {word}–æ–≤: {all_price} —Ä—É–±.\n'
                                   f'–°—Ä–µ–¥–Ω–∏–π {word}: {module.get_medium(all_price, all_count)}')
        if not all_count == 0:
            tableform.form_table(call.message.chat.id, module.get_data(call.message.chat.id,
                                                                       statistics_request.positions_type))

            table = open(f'userfiles/tables/{call.message.chat.id}.xlsx', 'rb')
            bot.send_document(call.message.chat.id, table)

    if statistics_request.request_type == 'categories_statistics':
        categories_dict = module.get_categories_positions(call.message.chat.id, statistics_request.positions_type)
        message = ''
        for i in categories_dict.keys():
            pr = module.get_medium(categories_dict[i][0], all_price)
            if not pr == '-':
                pr *= 100

            message += i + ': ' + str(round(categories_dict[i][0], 2)) + '—Ä—É–±. (' + str(round(pr, 2)) + '%)\n'

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {word}–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: \n' + message + '---\n' + f'–í—Å–µ–≥–æ {word}–æ–≤: {all_count}\n' + f'C—É–º–º–∞ {word}–æ–≤: {all_price}')
        if not all_count == 0:
            prices = []
            for i in list(categories_dict.values()):
                prices.append(i[0])
            plot.create_pie_diagram(call.message.chat.id, list(categories_dict.keys()), prices)
            pie = open(f'userfiles/statistics/{call.message.chat.id}pie.png', 'rb')
            bot.send_photo(chat_id=call.message.chat.id, photo=pie)

            counts = []
            for i in list(categories_dict.values()):
                counts.append(i[1])
            plot.create_barh_diagram(call.message.chat.id, list(categories_dict.keys()), counts)
            barh = open(f'userfiles/statistics/{call.message.chat.id}barh.png', 'rb')

            bot.send_photo(chat_id=call.message.chat.id, photo=barh)

    statistics_period_keyboard = get_statistics_period_keyboard(statistics_request.positions_type + '_statistics')
    bot.send_message(call.message.chat.id, 'üìà –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', reply_markup=statistics_period_keyboard)


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'current_month')
def callback_current_month(call):
    """
    –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    statistics_request = temp_dict[call.message.chat.id]
    date = str(call.data).split(';')
    statistics_request.month = date[1]
    statistics_request.year = date[2]
    all_price, all_count = module.get_positions(call.message.chat.id, statistics_request.positions_type,
                                                statistics_request.month, statistics_request.year)
    word = ''
    if statistics_request.positions_type == 'income':
        word = '–¥–æ—Ö–æ–¥'
    if statistics_request.positions_type == 'expense':
        word = '—Ä–∞—Å—Ö–æ–¥'

    if statistics_request.request_type == 'default_statistics':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {word}–æ–≤ –∑–∞ {module.month_name(int(statistics_request.month))} '
                                   f'{statistics_request.year}:\n '
                                   f'---\n'
                                   f'–í—Å–µ–≥–æ {word}–æ–≤: {all_count} \n'
                                   f'–°—É–º–º–∞ {word}–æ–≤: {all_price} —Ä—É–±.\n'
                                   f'–°—Ä–µ–¥–Ω–∏–π {word}: {module.get_medium(all_price, all_count)}')
        if not all_count == 0:
            tableform.form_table(call.message.chat.id, module.get_data(call.message.chat.id,
                                                                       statistics_request.positions_type,
                                                                       statistics_request.month,
                                                                       statistics_request.year))

            table = open(f'userfiles/tables/{call.message.chat.id}.xlsx', 'rb')
            bot.send_document(call.message.chat.id, table)

    if statistics_request.request_type == 'categories_statistics':
        categories_dict = module.get_categories_positions(call.message.chat.id, statistics_request.positions_type,
                                                          statistics_request.month, statistics_request.year)
        message = ''
        for i in categories_dict.keys():
            pr = module.get_medium(categories_dict[i][0], all_price)
            if not pr == '-':
                pr = round(pr * 100, 2)

            message += i + ': ' + str(categories_dict[i][0]) + '—Ä—É–±. (' + str(pr) + '%)\n'

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'üìä C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {word}–æ–≤ –∑–∞ {module.month_name(int(statistics_request.month))} '
                                   f'{statistics_request.year}:\n' + message + '---\n' + f'–í—Å–µ–≥–æ {word}–æ–≤: {all_count}\n' + f'C—É–º–º–∞ {word}–æ–≤: {all_price}')
        if not all_count == 0:
            prices = []
            for i in list(categories_dict.values()):
                prices.append(i[0])
            plot.create_pie_diagram(call.message.chat.id, list(categories_dict.keys()), prices)
            pie = open(f'userfiles/statistics/{call.message.chat.id}pie.png', 'rb')
            bot.send_photo(chat_id=call.message.chat.id, photo=pie)

            counts = []
            for i in list(categories_dict.values()):
                counts.append(i[1])
            plot.create_barh_diagram(call.message.chat.id, list(categories_dict.keys()), counts)
            barh = open(f'userfiles/statistics/{call.message.chat.id}barh.png', 'rb')

            bot.send_photo(chat_id=call.message.chat.id, photo=barh)

    month_slider = get_month_slider(statistics_request.request_type)
    bot.send_message(call.message.chat.id, text='üìà –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', reply_markup=month_slider)


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'prev_slide')
def callback_prev_slide(call):
    """
    –ü–µ—Ä–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –≤ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = str(call.data).split(';')
    current = datetime.datetime(int(date[2]), int(date[1]), 1)
    prev = current - datetime.timedelta(days=1)
    statistics_type = temp_dict[call.message.chat.id].request_type
    bot.edit_message_text(text=call.message.text,
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=get_month_slider(statistics_type, int(prev.year), int(prev.month)))


@bot.callback_query_handler(func=lambda call: str(call.data).split(";")[0] == 'next_slide')
def callback_next_slide(call):
    """
    –°–ª–µ–¥—É—é—à–∏–π –º–µ—Å—è—Ü –≤ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞
    :param call: –û–±—ä–µ–∫—Ç –≤—ã–∑–æ–≤–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    bot.answer_callback_query(callback_query_id=call.id)
    date = str(call.data).split(';')
    print(date)
    current = datetime.datetime(int(date[2]), int(date[1]), 1)
    nex = current + datetime.timedelta(days=31)
    statistics_type = temp_dict[call.message.chat.id].request_type
    bot.edit_message_text(text=call.message.text,
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=get_month_slider(statistics_type, int(nex.year), int(nex.month)))


bot.enable_save_next_step_handlers()
bot.load_next_step_handlers()

if __name__ == '__main__':
    bot.polling()
